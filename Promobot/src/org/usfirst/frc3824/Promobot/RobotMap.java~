// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3824.Promobot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftFrontMotor;
    public static SpeedController driveTrainRightFrontMotor;
    public static SpeedController driveTrainLeftRearMotor;
    public static SpeedController driveTrainRightRearMotor;
    public static RobotDrive driveTrainArcadeDrive;
    public static Solenoid cannonsSolenoid1;
    public static Solenoid cannonsSolenoid2;
    public static Solenoid cannonsSolenoid3;
    public static Solenoid cannonsSolenoid4;
    public static SpeedController cannonActuatorMotor;
    public static Encoder cannonActuatorEncoder;
    public static Ultrasonic humanSafetySensorBatSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    //public static Relay cannonsTestSolenoid;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftFrontMotor = new Talon(0);
        LiveWindow.addActuator("Drive Train", "Left Front Motor", (Talon) driveTrainLeftFrontMotor);
        
        driveTrainRightFrontMotor = new Talon(1);
        LiveWindow.addActuator("Drive Train", "Right Front Motor", (Talon) driveTrainRightFrontMotor);
        
        driveTrainLeftRearMotor = new Talon(2);
        LiveWindow.addActuator("Drive Train", "Left Rear Motor", (Talon) driveTrainLeftRearMotor);
        
        driveTrainRightRearMotor = new Talon(3);
        LiveWindow.addActuator("Drive Train", "Right Rear Motor", (Talon) driveTrainRightRearMotor);
        
        driveTrainArcadeDrive = new RobotDrive(driveTrainLeftFrontMotor, driveTrainLeftRearMotor,
              driveTrainRightFrontMotor, driveTrainRightRearMotor);
        
        driveTrainArcadeDrive.setSafetyEnabled(true);
        driveTrainArcadeDrive.setExpiration(0.1);
        driveTrainArcadeDrive.setSensitivity(0.5);
        driveTrainArcadeDrive.setMaxOutput(1.0);

        driveTrainArcadeDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainArcadeDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        cannonsSolenoid1 = new Solenoid(0, 4);
        LiveWindow.addActuator("Cannons", "Solenoid 1", cannonsSolenoid1);
        
        cannonsSolenoid2 = new Solenoid(0, 5);
        LiveWindow.addActuator("Cannons", "Solenoid 2", cannonsSolenoid2);
        
        cannonsSolenoid3 = new Solenoid(0, 6);
        LiveWindow.addActuator("Cannons", "Solenoid 3", cannonsSolenoid3);
        
        cannonsSolenoid4 = new Solenoid(0, 7);
        LiveWindow.addActuator("Cannons", "Solenoid 4", cannonsSolenoid4);
        
        cannonActuatorMotor = new Talon(4);
        LiveWindow.addActuator("Cannon Actuator", "Motor", (Talon) cannonActuatorMotor);
        
        cannonActuatorEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Cannon Actuator", "Encoder", cannonActuatorEncoder);
        cannonActuatorEncoder.setDistancePerPulse(1.0);
        cannonActuatorEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        humanSafetySensorBatSensor = new Ultrasonic(2, 3);
        LiveWindow.addSensor("Human Safety Sensor", "Bat Sensor", humanSafetySensorBatSensor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //cannonsTestSolenoid = new Relay(0);
        //LiveWindow.addActuator("Cannons", "Test Solenoid", cannonsTestSolenoid);
    }
}
