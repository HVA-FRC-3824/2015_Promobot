// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3824.Promobot;

import org.usfirst.frc3824.Promobot.commands.AutonomousDoNothing;
import org.usfirst.frc3824.Promobot.subsystems.CannonActuator;
import org.usfirst.frc3824.Promobot.subsystems.Cannons;
import org.usfirst.frc3824.Promobot.subsystems.DriveTrain;
import org.usfirst.frc3824.Promobot.subsystems.HumanSafetySensor;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Cannons cannons;
    public static CannonActuator cannonActuator;
    public static HumanSafetySensor humanSafetySensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        cannons = new Cannons();
        cannonActuator = new CannonActuator();
        humanSafetySensor = new HumanSafetySensor();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousDoNothing();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	
    	Robot.cannonActuator.setPositionSetpoint(Constants.HOME_POSITION);
		Robot.cannonActuator.resetPID();
        Robot.cannonActuator.setOutputRange();
		Robot.cannonActuator.enablePositionPID();
		Robot.cannonActuator.setContinuous();
    	
    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        
        SmartDashboard.putNumber("Position Setpoint", Robot.cannonActuator.getPositionSetpoint());
        SmartDashboard.putNumber("Can Actuator Motor", RobotMap.cannonActuatorMotor.get());
        SmartDashboard.putNumber("Can Actuator Encoder", RobotMap.cannonActuatorEncoder.get());
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        Robot.humanSafetySensor.getBatSensor().setEnabled(true);
        
        //Robot.cannonActuator.resetEncoder();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        SmartDashboard.putNumber("Chassis Left Front Motor", RobotMap.driveTrainLeftFrontMotor.get());
        SmartDashboard.putNumber("Chassis Right Front Motor", RobotMap.driveTrainRightFrontMotor.get());
        SmartDashboard.putNumber("Chassis Left Rear Motor", RobotMap.driveTrainLeftRearMotor.get());
        SmartDashboard.putNumber("Chassis Right Rear Motor", RobotMap.driveTrainRightRearMotor.get());
        
        SmartDashboard.putBoolean("Solenoid 1", RobotMap.cannonsSolenoid1.get());
        SmartDashboard.putBoolean("Solenoid 2", RobotMap.cannonsSolenoid2.get());
        SmartDashboard.putBoolean("Solenoid 3", RobotMap.cannonsSolenoid3.get());
        SmartDashboard.putBoolean("Solenoid 4", RobotMap.cannonsSolenoid4.get());
        
        SmartDashboard.putNumber("Can Actuator Motor", RobotMap.cannonActuatorMotor.get());
        SmartDashboard.putNumber("Can Actuator Encoder", RobotMap.cannonActuatorEncoder.get());
        
        SmartDashboard.putNumber("Can Actuator Error", Robot.cannonActuator.getError());
        
        SmartDashboard.putNumber("Position Setpoint", Robot.cannonActuator.getPositionSetpoint());
        
        SmartDashboard.putBoolean("Bat Sensor", RobotMap.humanSafetySensorBatSensor.isEnabled());
        
        Robot.humanSafetySensor.spiderSense();
        
        SmartDashboard.putNumber("Bat Sensor Range", RobotMap.humanSafetySensorBatSensor.getRangeInches());
        SmartDashboard.putBoolean("Bat Sensor Range Validity", RobotMap.humanSafetySensorBatSensor.isRangeValid());
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
        
        //SmartDashboard.putNumber("Can Actuator Encoder", RobotMap.cannonActuatorEncoder.get());
    }
}
